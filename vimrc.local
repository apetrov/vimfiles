set pastetoggle=<F2>

colorscheme zenburn

set cursorline
set wildmenu
set guifont=Bitstream\ Vera\ Sans\ Mono:h13
hi CursorLine guibg=#2D2D2D ctermbg=235
set dictionary=/usr/share/dict/words

" https://github.com/thoughtbot/vim-rspec#iterm-instead-of-terminal
let g:rspec_runner = "os_x_iterm2"

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

let g:rspec_command = "Dispatch docker-compose exec spring rspec {spec}"

function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

function! CommitToTmux() range
  let [lnum1, col1] = getpos("'<")[1:2]
  let [lnum2, col2] = getpos("'>")[1:2]
  let lines = getline(lnum1, lnum2)
  let lines[-1] = lines[-1][: col2 - (&selection == 'inclusive' ? 1 : 2)]
  let lines[0] = lines[0][col1 - 1:]
  for i in lines
    call Send_to_Tmux(join([i,"\n"], ""))
  endfor
endfunction

function! VariableToLetDefinition()
  let @a="^ilet(:\<Esc>ea){\<Esc>f=xA}"
  normal @a
endfunction

function! LetDefinitionToVariable()
  let @a="^f:x^dwds(f{i = \<Esc>f{ds{"
  normal @a
endfunction

" Unwrap ruby block
function! UnwrapBlock()
  normal vir"ay"bdirV%dk"apmagg=G`a
endfunction



nnoremap <C-n> :call NumberToggle()<cr>

" Use dot command in visual mode
vnoremap . :norm.<CR>

" switch between panes with Ctrl+h|j|k|l combo
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" [a and ]a to move between arguments
nmap ]a :next!<CR>
nmap [a :Next!<CR>

nmap <left> :bp!<CR>
nmap <right> :bn!<CR>
nmap <up> :cpfile!<CR>
nmap <down> :cnfile!<CR>

" Smooth scrolling. keep cursor in center
nnoremap j gj
nnoremap k gk
map Y y$
" Evaluate current line
nnoremap Q A=<ESC>0yt=A<C-r>=<C-r>"<CR><ESC>

map <leader>q :wq<CR>
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>d :call Send_to_Tmux(join([getline('.'),"\n"], ""))<CR>
vmap <Leader>d :call CommitToTmux()<CR>
map <Leader>w :w<CR>
map <leader>r :make<CR>
map <leader>p :Git pull<CR>
map <leader>P :Git push<CR>
map <Leader>c :Gcommit<CR>
map <Leader>s :Gstatus<CR>
map gb :Gblame<CR>
map gl :Glog<CR>
map gq :cclose<CR>

command! DeployProduction execute "Dispatch git push -f production master"
command! DeployStaging execute "Dispatch git push -f staging master"
command! Master execute "Dispatch git checkout master"
command! Path :echo join(split(&path, ","), "\n")
command! Escape .!ruby -ne 'require "cgi"; puts CGI.escape($_.strip)'
command! FormatJson %!python -m json.tool
command! VariableToLetDefinition call VariableToLetDefinition()
command! LetDefinitionToVariable call LetDefinitionToVariable()
command! UnwrapBlock call UnwrapBlock()

let g:vim_markdown_folding_disabled = 1

autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=0
