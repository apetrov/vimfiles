""Intent
"set smartindent
set autoindent
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set nowrap

set autowrite
set shell=/bin/bash "zsh cause multiple issues, it's easier to use bash
"set shell=/bin/zsh

set hlsearch      " highlight search terms
set incsearch     " show search matches as you type

" Avoid vim backup files
set nobackup
set noswapfile
set autoread

set history=1000
set showcmd
set visualbell
set noerrorbells

"Make things faster
set notimeout
set ttimeout
set ttimeoutlen=100

set tags=.git/tags;
set splitright
set winwidth=84

" Works for both OSX and linux
set clipboard=unnamed

set wildignore=*.swp,*.bak,*.pyc,*.class
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=vendor/gems/*,vendor/cache/*,.bundle/*,.sass-cache/*,.git/*,cookbooks/*
set wildignore+=log/*,target/*,.DS_Store/*,bin/*
set wildignore+=*~,._*

try
  "colorscheme zenburn
  colorscheme space_vim_theme
catch /^Vim\%((\a\+)\)\=:E185/
    " deal with it
endtry
set background=dark
set guifont=Bitstream\ Vera\ Sans\ Mono:h13
set t_Co=256  "necessary for TMUX
hi CursorLine guibg=#2D2D2D ctermbg=235


" https://superuser.com/questions/402448/vim-configuration-slow-in-terminal-iterm2-but-not-in-macvim
set nocursorline
set nocursorcolumn
set lazyredraw
set scrolljump=8

set wildmenu
set dictionary=/usr/share/dict/words
set pastetoggle=<F2>

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif


let g:netrw_banner = 0
let g:snipMate = { 'snippet_version' : 1 }
" https://github.com/thoughtbot/vim-rspec#iterm-instead-of-terminal
let g:rspec_runner = "os_x_iterm2"
let g:rspec_command = "Dispatch rspec {spec}"
let g:vim_markdown_folding_disabled = 1
let g:lsp_diagnostics_enabled = 0 
let g:closetag_html_style=1
let g:html_indent_tags = 'li\|p'
let mapleader=" "

function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

function! CommitToTmux() range
  let [lnum1, col1] = getpos("'<")[1:2]
  let [lnum2, col2] = getpos("'>")[1:2]
  let lines = getline(lnum1, lnum2)
  let lines[-1] = lines[-1][: col2 - (&selection == 'inclusive' ? 1 : 2)]
  let lines[0] = lines[0][col1 - 1:]
  for i in lines
    call Send_to_Tmux(join([i,"\n"], ""))
  endfor
endfunction

" Unwrap ruby block
function! UnwrapBlock()
  normal vir"ay"bdirV%dk"apmagg=G`a
endfunction

" Ruby extract local variable to method
function! ExtractMethod()
  let @a="^\"zdt=x\"xDddmv[mOdef \<C-r>z\<CR>\<C-r>x\<Esc>jo\<Esc>'v"
  normal @a
endfunction

command! Path :echo join(split(&path, ","), "\n")
command! ExtractLetDefinition call ExtractLetDefinition()
command! InlineLetDefinition call InlineLetDefinition()
command! UnwrapBlock call UnwrapBlock()
command! ExtractMethod call ExtractMethod()
command! NewClassCtor call NewClassCtor()

" load files changed in current branch into quickfix window
" require "git files"
" git diff --name-only $(git merge-base HEAD master)
" based on https://blog.jez.io/cli-code-review/
command! -bar GChanges call setqflist(map(systemlist("git files"), '{"filename": v:val, "lnum": 1}')) | copen

" https://github.com/junegunn/fzf/wiki/Examples-(vim)
command! Buffers call fzf#run(fzf#wrap(
    \ {'source': map(range(1, bufnr('$')), 'bufname(v:val)')}))


" Use dot command in visual mode
vnoremap . :norm.<CR>

" switch between panes with Ctrl+h|j|k|l combo
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

nmap <left> :bp!<CR>
nmap <right> :bn!<CR>
nmap <up> :cpfile!<CR>
nmap <down> :cnfile!<CR>

" Smooth scrolling. keep cursor in center
nnoremap j gj
nnoremap k gk
map Y y$

map <Leader>mtf :call RunCurrentSpecFile()<CR>
map <Leader>mts :call RunNearestSpec()<CR>
map <Leader>mtl :call RunLastSpec()<CR>
map <Leader>mu :UnwrapBlock<CR>

map <Leader>mem :ExtractMethod<CR>
map <Leader>mc :NewClassCtor<CR>

map <Leader>bS :call Send_to_Tmux(join([getline('.'),"\n"], ""))<CR>
vmap <Leader>bS :call CommitToTmux()<CR>
map <Leader>bd :bd<CR>
map <Leader>bb :Buffers<CR>
map <Leader>bN :vnew<CR>
map <Leader>bn :bn!<CR>
map <Leader>bp :bp!<CR>
map <Leader>bY ggyG
map <Leader>bq :wq<CR>

map <Leader>gp :Git pull --rebase<CR>
map <Leader>gf :Git fetch<CR>
map <Leader>gP :Git push<CR>
map <Leader>gs :Git<CR>
map <Leader>gB :Gblame<CR>
map <Leader>gl :Glog<CR>
map <Leader>gL :Glog %<CR>
map <Leader>gr :Gread<CR>
map <Leader>gw :Gwrite<CR>

" Gvdiffsplit but order of panel is more natural
map <Leader>gd :cclose<CR><C-w><C-v>:Gedit HEAD:%<CR>:windo diffthis<CR>
map <Leader>gR :GChanges<CR>

map <Leader>ff :FZF<CR>
map <Leader>fs :w<CR>

map <Leader>xt :Tabularize/
vmap <Leader>xt :Tabularize/

map <Leader>do :windo diffthis<CR>
map <Leader>dO :windo diffoff<CR>

map <Leader>1 <C-w>H
map <Leader>2 <C-w>L

map <Leader>gg :LspDefinition<CR>
map <Leader>mrn :LspRename<CR>

if empty(glob('~/.vim/plugged/vim-lsp'))
  echo "vim-lsp not installed. Please run :PlugInstall"
else
  if executable('pylsp')
      " pip install python-lsp-server
      au User lsp_setup call lsp#register_server({
          \ 'name': 'pylsp',
          \ 'cmd': {server_info->['pylsp']},
          \ 'allowlist': ['python'],
          \ })
  endif

  function! s:on_lsp_buffer_enabled() abort
      setlocal omnifunc=lsp#complete
      setlocal signcolumn=yes
      if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
      nmap <buffer> <Leader>gg <plug>(lsp-definition)
      nmap <buffer> <Leader>gr <plug>(lsp-references)
      nmap <buffer> <Leader>gi <plug>(lsp-implementation)
      nmap <buffer> <Leader>gt <plug>(lsp-type-definition)
      nmap <buffer> <Leader>rn <plug>(lsp-rename)

      let g:lsp_format_sync_timeout = 1000
  endfunction

  augroup lsp_install
      au!
      " call s:on_lsp_buffer_enabled only for languages that has the server registered.
      autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END
end

if has("autocmd")
  autocmd BufRead,BufNewFile Gemfile set filetype=ruby
  autocmd BufRead,BufNewFile Gemfile.lock set filetype=ruby
  autocmd BufRead,BufNewFile Rakefile set filetype=ruby
  autocmd BufRead,BufNewFile Capfile, set filetype=ruby
  autocmd BufRead,BufNewFile config.ru, set filetype=ruby
  autocmd BufRead,BufNewFile config, set filetype=ruby
  autocmd BufRead,BufNewFile Guardfile, set filetype=ruby
	autocmd FileType make set noexpandtab shiftwidth=4 softtabstop=0
  " not necessary
  autocmd BufRead,BufNewFile *.rb, set makeprg=ruby\ %
  autocmd BufRead,BufNewFile *_spec.py, set makeprg=mamba\ %
  autocmd BufRead,BufNewFile *.htm,*.html,*.erb setlocal tabstop=2 shiftwidth=2 softtabstop=2
  " not sure how to make ruby and rspec work at the same time. this solution breaks
  " ruby syntax and snippets but make rspec working
  " autocmd BufRead,BufNewFile *_spec.rb, set filetype=ruby-rspec

  " As I use only narrow screen displays screen realestate is very valuable
  au WinEnter * :setlocal number
  au WinLeave * :setlocal nonumber

  au WinEnter * :set winfixheight
  au WinEnter * :wincmd =
end
