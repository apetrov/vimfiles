set wildignore=*.swp,*.bak,*.pyc,*.class
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=vendor/gems/*,vendor/cache/*,.bundle/*,.sass-cache/*,.git/*,cookbooks/*
set wildignore+=log/*,target/*,.DS_Store/*,bin/*
set wildignore+=*~,._*


function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

function! CommitToTmux() range
  let [lnum1, col1] = getpos("'<")[1:2]
  let [lnum2, col2] = getpos("'>")[1:2]
  let lines = getline(lnum1, lnum2)
  let lines[-1] = lines[-1][: col2 - (&selection == 'inclusive' ? 1 : 2)]
  let lines[0] = lines[0][col1 - 1:]
  for i in lines
    call Send_to_Tmux(join([i,"\n"], ""))
  endfor
endfunction

" Unwrap ruby block
function! UnwrapBlock()
  normal vir"ay"bdirV%dk"apmagg=G`a
endfunction

" Ruby extract local variable to method
function! ExtractMethod()
  let @a="^\"zdt=x\"xDddmv[mOdef \<C-r>z\<CR>\<C-r>x\<Esc>jo\<Esc>'v"
  normal @a
endfunction

command! Path :echo join(split(&path, ","), "\n")
command! ExtractLetDefinition call ExtractLetDefinition()
command! InlineLetDefinition call InlineLetDefinition()
command! UnwrapBlock call UnwrapBlock()
command! ExtractMethod call ExtractMethod()
command! NewClassCtor call NewClassCtor()

" load files changed in current branch into quickfix window
" require "git files"
" git diff --name-only $(git merge-base HEAD master)
" based on https://blog.jez.io/cli-code-review/
command! -bar GChanges call setqflist(map(systemlist("git files"), '{"filename": v:val, "lnum": 1}')) | copen


nmap <left> :bp!<CR>
nmap <right> :bn!<CR>
nmap <up> :cpfile!<CR>
nmap <down> :cnfile!<CR>

" Smooth scrolling. keep cursor in center
nnoremap j gj
nnoremap k gk
map Y y$

map <Leader>mtf :call RunCurrentSpecFile()<CR>
map <Leader>mts :call RunNearestSpec()<CR>
map <Leader>mtl :call RunLastSpec()<CR>
map <Leader>mu :UnwrapBlock<CR>

map <Leader>mem :ExtractMethod<CR>
map <Leader>mc :NewClassCtor<CR>

map <Leader>bS :call Send_to_Tmux(join([getline('.'),"\n"], ""))<CR>
vmap <Leader>bS :call CommitToTmux()<CR>
map <Leader>bd :bd<CR>
map <Leader>bN :vnew<CR>
map <Leader>bn :bn!<CR>
map <Leader>bp :bp!<CR>
map <Leader>bY ggyG
map <Leader>bq :wq<CR>

map <Leader>fs :w<CR>

map <Leader>xt :Tabularize/
vmap <Leader>xt :Tabularize/

map <Leader>do :windo diffthis<CR>
map <Leader>dO :windo diffoff<CR>

map <Leader>1 <C-w>H
map <Leader>2 <C-w>L

map <Leader>xs :JupyniumStartSync<CR>


if has("autocmd")
  autocmd BufRead,BufNewFile Gemfile set filetype=ruby
  autocmd BufRead,BufNewFile Gemfile.lock set filetype=ruby
  autocmd BufRead,BufNewFile Rakefile set filetype=ruby
  autocmd BufRead,BufNewFile Capfile, set filetype=ruby
  autocmd BufRead,BufNewFile config.ru, set filetype=ruby
  autocmd BufRead,BufNewFile config, set filetype=ruby
  autocmd BufRead,BufNewFile Guardfile, set filetype=ruby
	autocmd FileType make set noexpandtab shiftwidth=4 softtabstop=0
  " not necessary
  autocmd BufRead,BufNewFile *.rb, set makeprg=ruby\ %
  autocmd BufRead,BufNewFile *_spec.py, set makeprg=mamba\ %
  autocmd BufRead,BufNewFile *.htm,*.html,*.erb setlocal tabstop=2 shiftwidth=2 softtabstop=2
  " not sure how to make ruby and rspec work at the same time. this solution breaks
  " ruby syntax and snippets but make rspec working
  " autocmd BufRead,BufNewFile *_spec.rb, set filetype=ruby-rspec

  " As I use only narrow screen displays screen realestate is very valuable
  au WinEnter * :setlocal number
  au WinLeave * :setlocal nonumber

  au WinEnter * :set winfixheight
  au WinEnter * :wincmd =
end
